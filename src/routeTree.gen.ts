/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ExampleTwoImport } from "./routes/example-two";
import { Route as ExampleOneImport } from "./routes/example-one";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const ExampleTwoRoute = ExampleTwoImport.update({
  id: "/example-two",
  path: "/example-two",
  getParentRoute: () => rootRoute,
} as any);

const ExampleOneRoute = ExampleOneImport.update({
  id: "/example-one",
  path: "/example-one",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/example-one": {
      id: "/example-one";
      path: "/example-one";
      fullPath: "/example-one";
      preLoaderRoute: typeof ExampleOneImport;
      parentRoute: typeof rootRoute;
    };
    "/example-two": {
      id: "/example-two";
      path: "/example-two";
      fullPath: "/example-two";
      preLoaderRoute: typeof ExampleTwoImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/example-one": typeof ExampleOneRoute;
  "/example-two": typeof ExampleTwoRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/example-one": typeof ExampleOneRoute;
  "/example-two": typeof ExampleTwoRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/example-one": typeof ExampleOneRoute;
  "/example-two": typeof ExampleTwoRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/example-one" | "/example-two";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/example-one" | "/example-two";
  id: "__root__" | "/" | "/example-one" | "/example-two";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ExampleOneRoute: typeof ExampleOneRoute;
  ExampleTwoRoute: typeof ExampleTwoRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExampleOneRoute: ExampleOneRoute,
  ExampleTwoRoute: ExampleTwoRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/example-one",
        "/example-two"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/example-one": {
      "filePath": "example-one.tsx"
    },
    "/example-two": {
      "filePath": "example-two.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
